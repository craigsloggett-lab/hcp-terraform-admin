#!/bin/sh

set -eu

# Check if the required utilities are installed.
for utility in jq terraform; do
  command -v "${utility}" >/dev/null || {
    printf '%s\n' "Error: ${utility} is not installed." >&2
    exit 1
  }
done

# Check if the required `TF_TOKEN` environment variable is set.
tf_token="${TF_TOKEN:?'parameter is null or not set. Use export TF_TOKEN="" to set this parameter.'}"

# Get the HCP Terraform organization name from the required `hcp_terraform_organization_name` terraform variable.
script_path="$(cd "$(dirname "$0")" && pwd)"
tfvars_path="${script_path}/../../terraform.tfvars"
locals_path="${tfvars_path}/locals_imports.tf"

[ -f "${tfvars_path}" ] || {
  echo "Error: terraform.tfvars not found, unable to get the organization name." >&2
  exit 1
}

organization_name="$(grep '^hcp_terraform_organization_name' "${tfvars_path}" | cut -d'=' -f2 | tr -d ' "')"

# Clear the `imports.tf` file.
: >"${locals_path}"

{
  printf '%s\n' "locals {"
  printf '%s\n' "imports = {"
} >>"${locals_path}"

owners_team_id="$(
  curl --silent \
    --header "Authorization: Bearer ${tf_token}" \
    --header "Content-Type: application/vnd.api+json" \
    https://app.terraform.io/api/v2/organizations/"${organization_name}"/teams |
    jq -r '.data[] | select(.attributes.name == "owners") | .id'
)"

{
  printf '%s\n' "team_ids = {"
  printf '%s = "%s"\n' "owners" "${owners_team_id}"
  printf '%s\n' "}"
} >>"${locals_path}"

owners_team_organization_membership_ids="$(curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/teams/"${owners_team_id}" |
  jq -r '.data.relationships."organization-memberships".data[].id' |
  while read -r organization_membership_id; do
    email="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/organization-memberships/"${organization_membership_id}" |
      jq -r '.data.attributes.email')"
    printf '"%s" = "%s"\n' "${email}" "${organization_membership_id}"
  done)"

{
  printf '%s\n' "organization_membership_ids = {"
  printf '%s\n' "owners = {"
  printf '%s\n' "${owners_team_organization_membership_ids}"
  printf '%s\n%s\n' "}" "}"
} >>"${locals_path}"

project_ids="$(curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/organizations/"${organization_name}"/projects |
  jq -r '.data[].id' |
  while read -r project_id; do
    project_name="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/projects/"${project_id}" |
      jq -r '.data.attributes.name')"
    printf '"%s" = "%s"\n' "${project_name}" "${project_id}"
  done)"

{
  printf '%s\n' "project_ids = {"
  printf '%s\n' "${project_ids}"
  printf '%s\n' "}"
} >>"${locals_path}"

variable_set_ids="$(curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/organizations/"${organization_name}"/varsets |
  jq -r '.data[].id' |
  while read -r variable_set_id; do
    variable_set_name="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/varsets/"${variable_set_id}" |
      jq -r '.data.attributes.name')"
    printf '"%s" = "%s"\n' "${variable_set_name}" "${variable_set_id}"
  done)"

{
  printf '%s\n' "variable_set_ids = {"
  printf '%s\n' "${variable_set_ids}"
  printf '%s\n' "}"
} >>"${locals_path}"

workspace_ids="$(curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/organizations/"${organization_name}"/workspaces |
  jq -r '.data[].id' |
  while read -r workspace_id; do
    workspace_name="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/workspaces/"${workspace_id}" |
      jq -r '.data.attributes.name')"
    printf '%s = "%s"\n' "${workspace_name}" "${workspace_id}"
  done)"

{
  printf '%s\n' "workspace_ids = {"
  printf '%s\n' "${workspace_ids}"
  printf '%s\n' "}"
} >>"${locals_path}"

{
  printf '%s\n%s\n' "}" "}"
} >>"${locals_path}"

terraform fmt "${script_path}/."
