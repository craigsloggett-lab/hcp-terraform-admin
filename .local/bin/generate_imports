#!/bin/sh

set -eu

# Check if the required utility `jq` is installed.
command -v jq >/dev/null || {
  echo "Error: jq is not installed." >&2
  exit 1
}

# Check if the required `TF_TOKEN` environment variable is set.
tf_token="${TF_TOKEN:?'parameter is null or not set. Use export TF_TOKEN="" to set this parameter.'}"

# Get the HCP Terraform organization name from the required `hcp_terraform_organization_name` terraform variable.
script_path="$(cd "$(dirname "$0")" && pwd)"
tfvars_path="${script_path}/../../terraform.tfvars"

[ -f "${tfvars_path}" ] || {
  echo "Error: terraform.tfvars not found, unable to get the organization name." >&2
  exit 1
}

organization_name="$(grep '^hcp_terraform_organization_name' "${tfvars_path}" | cut -d'=' -f2 | tr -d ' "')"

# The owners team ID is used in the organization membership ID query, so
# we assign it to a variable.
owners_team_id="$(
  curl --silent \
    --header "Authorization: Bearer ${tf_token}" \
    --header "Content-Type: application/vnd.api+json" \
    https://app.terraform.io/api/v2/organizations/"${organization_name}"/teams |
    jq -r '.data[] | select(.attributes.name == "owners") | .id'
)"

email="$(curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/teams/"${owners_team_id}" |
  jq -r '.data.relationships."organization-memberships".data[].id' |
  while read -r organization_membership_id; do
    email="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/organization-memberships/"${organization_membership_id}" |
      jq -r '.data.attributes.email')"
    printf '"%s" = "%s"\n' "${email}" "${organization_membership_id}"
  done)"

printf '%s\n' "${email}" >"${script_path}/imports.tf"

curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/organizations/"${organization_name}"/projects |
  jq -r '.data[].id' |
  while read -r project_id; do
    project_name="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/projects/"${project_id}" |
      jq -r '.data.attributes.name')"
    printf '%s %s\n' "${project_id}" "${project_name}"
  done

curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/organizations/"${organization_name}"/workspaces |
  jq -r '.data[].id' |
  while read -r workspace_id; do
    workspace_name="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/workspaces/"${workspace_id}" |
      jq -r '.data.attributes.name')"
    printf '%s %s\n' "${workspace_id}" "${workspace_name}"
  done

curl --silent \
  --header "Authorization: Bearer ${tf_token}" \
  --header "Content-Type: application/vnd.api+json" \
  https://app.terraform.io/api/v2/organizations/"${organization_name}"/varsets |
  jq -r '.data[].id' |
  while read -r variable_set_id; do
    variable_set_name="$(curl --silent \
      --header "Authorization: Bearer ${tf_token}" \
      --header "Content-Type: application/vnd.api+json" \
      https://app.terraform.io/api/v2/varsets/"${variable_set_id}" |
      jq -r '.data.attributes.name')"
    printf '%s %s\n' "${variable_set_id}" "${variable_set_name}"
  done
