#!/bin/sh

set -eu

# Check if the required utilities are installed.
for utility in jq terraform; do
  command -v "${utility}" >/dev/null || {
    printf '%s\n' "Error: ${utility} is not installed." >&2
    exit 1
  }
done

# Check if the required `TF_TOKEN_app_terraform_io` environment variable is set.
tf_token="${TF_TOKEN_app_terraform_io:?'parameter is null or not set. Use export TF_TOKEN_app_terraform_io="" to set this parameter.'}"

# Define important paths.
script_path="$(cd "$(dirname "$0")" && pwd)"
tfvars_path="${script_path}/../../terraform.tfvars"
locals_imports_path="${script_path}/../../locals_imports.tf"

[ -f "${tfvars_path}" ] || {
  printf '%s\n' "Error: ${tfvars_path} not found, unable to get the organization name." >&2
  exit 1
}

# Get the HCP Terraform organization name from the required `hcp_terraform_organization_name` terraform variable.
organization_name="$(grep '^hcp_terraform_organization_name' "${tfvars_path}" | cut -d'=' -f2 | tr -d ' "')"

# Set the `curl` options once so we can just write `curl "$@"` everywhere.
set -- --silent --header "Authorization: Bearer ${tf_token}" --header "Content-Type: application/vnd.api+json"

# Clear the `locals_imports.tf` file.
: >"${locals_imports_path}"

# The rest of this script will generate a `locals` block by querying the
# HCP Terraform API for the relevant ID using the `TF_TOKEN_app_terraform_io`
# environment variable to authenticate.
#
# The general flow is:
# - Use `printf` to populate the HCL surrounding the IDs to query.
# - Use `curl` to query the relevant API endpoint.
# - Use `jq` to filter for the relevant resources / IDs.
# - Use a `while read -r variable_name; do` loop to iterate over
#   queries that require nested `curl` commands to get the necessary
#   IDs.
# - Use `printf` to populate the HCL block with the results from the
#   queries and filters.
#
# The generated file will resemble the following structure, with the appropriate
# IDs populated based on the HCP Terraform organization being managed:
#
# # This file is generated automatically using: `.local/bin/generate_locals_imports`.
# locals {
#   imports = {
#     team_ids = {
#       owners = "team-p9ryLNrpQ9TNmEFh"
#     }
#     organization_membership_ids = {
#       owners = {
#         "craig.sloggett@hashicorp.com"                           = "ou-tSVPjvXHB4iTqcPb"
#         "doormat@hashicorp.com"                                  = "ou-9KRr8gq4h6JikktE"
#         "api-org-craigsloggett-lab-xqsus22ynh@hashicorp.com"     = "ou-EhS6WkPBDVPxYYqd"
#         "api-team_1202828@hashicorp.com"                         = "ou-mLy6EZTkP2bKW9w3"
#         "gh-webhooks-craigsloggett-lab-db12onjulf@hashicorp.com" = "ou-j7QUTL6CcJUktJJC"
#       }
#     }
#     project_ids = {
#       "Default Project" = "prj-1ifijXyay7xeH9Zc"
#       "Platform Team"   = "prj-qW7NitPW1R49WN4b"
#     }
#     variable_set_ids = {
#       "TFE Provider Authentication" = "varset-FwFGK65suTr7eaAA"
#       "HCP Provider Authentication" = "varset-STBAvPjd212TqpgM"
#     }
#     workspace_ids = {
#       hcp-terraform-admin = "ws-aAUcuGF6QEJKuQyL"
#     }
#   }
# }
#
# Finally, `terraform fmt` is used to automatically format the output, ensuring
# consistent spacing and alignment. This allows us to focus on generating the
# content without manually adjusting spacing in the `printf` commands.

{
  # shellcheck disable=SC2016
  printf '# This file is generated automatically using: `.local/bin/generate_locals_imports`.\n'
  printf '%s\n' "locals {"
  printf '%s\n' "imports = {"
} >>"${locals_imports_path}"

owners_team_id="$(
  curl "$@" https://app.terraform.io/api/v2/organizations/"${organization_name}"/teams |
    jq -r '.data[] | select(.attributes.name == "owners") | .id'
)"

{
  printf '%s\n' "team_ids = {"
  printf '%s = "%s"\n' "owners" "${owners_team_id}"
  printf '%s\n' "}"
} >>"${locals_imports_path}"

owners_team_organization_membership_ids="$(
  curl "$@" https://app.terraform.io/api/v2/teams/"${owners_team_id}" |
    jq -r '.data.relationships."organization-memberships".data[].id' |
    while read -r organization_membership_id; do
      email="$(
        curl "$@" https://app.terraform.io/api/v2/organization-memberships/"${organization_membership_id}" |
          jq -r '.data.attributes.email'
      )"
      printf '"%s" = "%s"\n' "${email}" "${organization_membership_id}"
    done
)"

{
  printf '%s\n' "organization_membership_ids = {"
  printf '%s\n' "owners = {"
  printf '%s\n' "${owners_team_organization_membership_ids}"
  printf '%s\n%s\n' "}" "}"
} >>"${locals_imports_path}"

project_ids="$(
  curl "$@" https://app.terraform.io/api/v2/organizations/"${organization_name}"/projects |
    jq -r '.data[].id' |
    while read -r project_id; do
      project_name="$(
        curl "$@" https://app.terraform.io/api/v2/projects/"${project_id}" |
          jq -r '.data.attributes.name'
      )"
      printf '"%s" = "%s"\n' "${project_name}" "${project_id}"
    done
)"

{
  printf '%s\n' "project_ids = {"
  printf '%s\n' "${project_ids}"
  printf '%s\n' "}"
} >>"${locals_imports_path}"

variable_set_ids="$(
  curl "$@" https://app.terraform.io/api/v2/organizations/"${organization_name}"/varsets |
    jq -r '.data[].id' |
    while read -r variable_set_id; do
      variable_set_name="$(
        curl "$@" https://app.terraform.io/api/v2/varsets/"${variable_set_id}" |
          jq -r '.data.attributes.name'
      )"
      printf '"%s" = "%s"\n' "${variable_set_name}" "${variable_set_id}"
    done
)"

{
  printf '%s\n' "variable_set_ids = {"
  printf '%s\n' "${variable_set_ids}"
  printf '%s\n' "}"
} >>"${locals_imports_path}"

workspace_ids="$(
  curl "$@" https://app.terraform.io/api/v2/organizations/"${organization_name}"/workspaces |
    jq -r '.data[].id' |
    while read -r workspace_id; do
      workspace_name="$(
        curl "$@" https://app.terraform.io/api/v2/workspaces/"${workspace_id}" |
          jq -r '.data.attributes.name'
      )"
      printf '%s = "%s"\n' "${workspace_name}" "${workspace_id}"
    done
)"

{
  printf '%s\n' "workspace_ids = {"
  printf '%s\n' "${workspace_ids}"
  printf '%s\n' "}"
} >>"${locals_imports_path}"

{
  printf '%s\n%s\n' "}" "}"
} >>"${locals_imports_path}"

# Format the `locals` block.
terraform fmt "${locals_imports_path}"
